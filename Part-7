===========================
High Availability
# ELB
# Cloud formation
# ASG
==========================

** Elastic Load Balancers - Exam Tips
		- Application Load Balancer (HTTP and HTTPS) - Layer 7 aware (make intelligent decisions/routing).
		- Network Load Balancer (TCP, TLS and UDP) - Extreme Performance/Static IP Addresses.
		- Classic Load Balancer (PREVIOUS GENERATION for HTTP, HTTPS, and TCP) - Test & Dev to keep costs low.
		- 504 Error means that the gateway has timed out. This means that the application not responding within the idle timeout period.
		- Troubleshoot the application to figure out App/DB layer to scale it out or up.  
		- If you need the IPv4 address of your end user, look for the X-Forwarded-For header.
		
	** Load Balancers and Health Checks
		- Instances monitored by ELB are reported as; InService, or OutofService
		- Health Checks check the instance health by talking to it.
		- Load Balancers have their own DNS name. You are never given an IP address.
		- Read the ELB FAQ for all Load Balancers.
		- Want to deep dive on application load balancers? Check out our deep dive course!
	
	** Advanced Load Balancers Theory
		1. Sticky Sessions: 
			Classic Load Balancer routes each request independently to the registered EC2 instance with the smallest load.
			Sticky sessions allow you to bind a user's session to a specific EC2 instance. This ensures that all requests from the user during the session are sent to the same instance.
		
			You can enable Sticky Sessions for Application Load Balancers as well, but the traffic will be sent to the Target Group level.
		
			Exam Scenario 1: A user trying to visit a website behind a classic load balancer and essentially what's happening is it's just sending all the traffic to one EC2 instance.
			Answer: Disable Sticky session.
		
			Exam Scenario 2: If you have got an EC2 instance or an application, where you're writing to an EC2 instance like local disk, then of course you would want to enable Sticky 			session.

		2. Cross Zone Load Balancing:
			Enables you to load balance across multiple AZ's
			
			Exam Scenario 1: 
				With No Cross Zone Load Balancing, we got a user and we are using Route 53 for our DNS, which is splitting of our traffic 50/50 and sending the requests to EC2's in two diff AZ's
				Each AC has a Load Balancer, The first AZ has 4 EC2 instances and the second has only one EC2 instance.
			
				Because we don't have Cross Zone Load Balancing enabled - First AZ will split 50% to 4 instances and the second AZ receives 50% on 1 instance.
			
				When we enable Cross Zone Load Balancing: The Load balancer will distribute the load evenly among instances on both AZ's.

			Exam Scenario 2: 
				We got a user and we are using Route 53 for our DNS, which is sending all the requests (100%) to a Load Balancer in AZ1, The first AZ1 has 4 EC2 instances and the second 				has only one EC2 instance.
			
				Route 53's 100% traffic is sent to the only load balancer in US-EAST-1A and no traffic is being sent to US-EAST-1B.
				In this scenario, we enable Cross Zone Load Balancing to distribute the traffic evenly between US-EAST-1A and US-EAST-1B 

		3. Path Patterns:
			You can create a listener with rules to forward requests based on the URL path. This is known as path-based routing.
			If you are running microservices, you can route traffic to multiple back-end services using path-based routing.
			For Example: you can route general requests to one target group and requests to render images to another target group
			
			Exam Scenario 1: 
				We got a user and we are using Route 53 for our DNS, which is sending all the requests (100%) to a Load Balancer in AZ1, The first AZ1 has 4 EC2 instances and the second 				has only one EC2 instance.
				
				www.myurl.com should go to AZ1 and www.myurl.com/images should go to the media instances in AZ2. In this instance, we enable Path Patterns.
				
	** Auto Scaling (3 to 4 questions)
		
		Auto Scaling group: Min size, Desired Capacity, Max Size and Scale out as needed
		
		Auto Scaling has 3 components
		
		1. Groups: Logical component, Webserver group or Application group or DB group ... etc. 
		
		2. Configuration Templates: Group uses a launch template or a launch configuration as a configuration template for its EC2 instances. 
		   You can specify information such as the AMI ID, instance type, key pair, security groups and block device mapping for your instances.
		
		3. Scaling Options: Scaling Options provides several ways for you to scale your Auto Scaling groups.
		   For Example: you can configure a group to scale based on the occurence of specified conditions (dynamic scaling) or on a schedule.   
		
		What are my scaling options: (Exam Tips)
			1. Maintain current instance levels at all times - Performs periodic health checks and launches a new one when an instance is unhealthy.
			2. Scale Manually - the most basic way to scale your resources where you specify Min size, Desired Capacity, Max Size of your Auto Scaling group.
			   Amazon EC2 Auto scaling manages the process of creating or terminating instances to maintain the updated capacity.
			3. Scale based on a schedule: based on date and time and predictable schedule.
			4. Scaled based on a demand: A more advanced way to scale your resources using scaling policies, which let you define parameters that control the scaling process.
			5. Use predictive scaling: You can use Amazon EC2 Auto Scaling with Amazon Auto Scaling to scale resources across multiple services.
			   AWS Auto Scaling can help you maintain optimal availability and performance by combing predictive scaling and dynamic scaling (proactive and reactive, respectively)
			   to scale your Amazon EC2 capacity faster.	
			
	** Launch Configurations and Auto Scaling Groups - Demo
		- Create a Launch Configuration and then use Launch Configuration during Auto Scaling Group creation
		- During Auto Scaling - there is warmup of 300 secs for new instances
		
	** HA Architecture
		- Always Design for failure
		- Use Multiple AZ's and Multiple Regions where ever you can.
		- Know the difference between Multi-AZ and Read Replicas for RDS.
		- Know the difference between scaling out and scaling up
		- Read the question carefully and always consider the cost element.
		- Know the different S3 storage classes.
			
	** Building a Fault-Tolerant WordPress Site: Getting Set Up - Demo
	
	** Building a Fault-Tolerant WordPress Site: CloudFormation - Demo
		- CloudFormation is a way of completely scripting your cloud environment
		- QuickStart is a bunch of CloudFormation templates already built by AWS Solutions Architects allowing you to create complex environments very quickly
		
	** Elastic Beanstalk - Lab (couple of questions in the exam)
		- With Elastic Beanstalk, you can quickly deploy and manage applications in the AWS cloud without worrying about the infrastructure that runs those applications.
		  You simply upload your application, and Elastic Beanstalk automatically handles the details of capacity provisioning, load balancing, scaling and application health monitoring.
		  
	** High Availability with Bastion Hosts
		- Scenario 1: Two hosts in two seperate AZ's. Uses a Network Load Balancer with static IP addresses and health checks to fail over from one host to another.
		- Can't use Application Load Balancer, at it's a layer 7 and you need to use layer 4
		- Scenario 2: One host in one AZ behind an Auto Scaling Group with health checks and a fixed Elastic IP.
		  If the host fails, the health check will fail and the Auto Scaling group will provision a new EC2 instance in a seperate AZ.
		  You can use a user data script to provision the same EIP to the new host. This is the cheapeast option but it is not 100% fault tolerant.
	
	** On-Premises Strategies with AWS
		- You need to be aware of what high-level AWS services you can use on-premises for the exam:
				  - Database Migration Service (DMS)
				  - Server Migration Service (SMS)
				  - AWS Application Discovery Service
				  - VM Import/Export
				  - Download Amazon Linux 2 and an ISO
		
	** HA Architecture Summary
		Same as above
